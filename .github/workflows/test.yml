name: PR Decoration

on:
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: 17

    - name: Build with Maven
      run: mvn -B clean verify

    - name: Generate JaCoCo Report
      run: mvn jacoco:report

    - name: Extract Coverage Percentage
      id: extract-coverage
      run: |
        # Write your script here to parse JaCoCo XML report and extract coverage percentage
        # For example, using Java:
        java -jar jacoco-parser.jar
        COVERAGE_PERCENTAGE=$(cat coverage_percentage.txt)
        echo "Coverage Percentage: $COVERAGE_PERCENTAGE"
        echo "::set-output name=coverage_percentage::$COVERAGE_PERCENTAGE"

    - name: Check Coverage Threshold
      if: success()  # Only execute if previous steps were successful
      run: |
        COVERAGE_THRESHOLD=80  # Adjust threshold as needed
        COVERAGE_PERCENTAGE=${{ steps.extract-coverage.outputs.coverage_percentage }}
        if (( $(echo "$COVERAGE_PERCENTAGE < $COVERAGE_THRESHOLD" | bc -l) )); then
          echo "Coverage below threshold. PR needs improvement."
          PR_STATUS="failure"
          COMMENT=":x: Code coverage is below the acceptable threshold of $COVERAGE_THRESHOLD%."
        else
          echo "Coverage meets threshold. Good job!"
          PR_STATUS="success"
          COMMENT=":white_check_mark: Code coverage meets the acceptable threshold of $COVERAGE_THRESHOLD%."
        fi
        echo "::set-output name=pr_status::$PR_STATUS"
        echo "::set-output name=comment::$COMMENT"

    - name: Add PR Comment
      if: always()  # Always execute to add PR comment
      uses: actions/github-script@v4
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const comment = "${{ steps.check-coverage.outputs.comment }}";
          github.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.payload.pull_request.number,
            body: comment
          });
